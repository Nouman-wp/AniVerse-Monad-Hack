<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jujutsu Arena React Game</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
        
        :root {
            --primary-red: #ef4444;
            --primary-blue: #3b82f6;
            --primary-purple: #8b5cf6;
            --primary-yellow: #f59e0b;
            --primary-green: #10b981;
            --accent-orange: #f97316;
            --neutral-900: #111827;
            --neutral-800: #1f2937;
            --neutral-700: #374151;
            --neutral-600: #4b5563;
            --neutral-500: #6b7280;
            --neutral-400: #9ca3af;
            --neutral-300: #d1d5db;
            --neutral-200: #e5e7eb;
            --neutral-100: #f3f4f6;
            --neutral-50: #f9fafb;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, var(--neutral-900) 0%, #1a0a2e 50%, var(--neutral-900) 100%);
            color: white;
            overflow-x: hidden;
            min-height: 100vh;
            position: relative;
            line-height: 1.5;
        }

        /* Intro Screen */
        .intro-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at center, #1a0a2e 0%, #000 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            z-index: 1000;
            transition: opacity 0.8s ease-out;
        }

        .intro-screen.hidden {
            opacity: 0;
            pointer-events: none;
        }

        .intro-title {
            font-size: clamp(2.5rem, 8vw, 5rem);
            font-weight: 900;
            text-align: center;
            background: linear-gradient(45deg, var(--primary-red), var(--primary-purple), var(--primary-blue));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: title-pulse 2s ease-in-out infinite;
            text-shadow: 0 0 30px rgba(239, 68, 68, 0.5);
            margin-bottom: 1rem;
        }

        .intro-subtitle {
            font-size: clamp(1rem, 3vw, 1.5rem);
            color: var(--neutral-300);
            margin-bottom: 2rem;
            opacity: 0.8;
        }

        .loading-bar {
            width: 300px;
            height: 4px;
            background: var(--neutral-700);
            border-radius: 2px;
            overflow: hidden;
            position: relative;
        }

        .loading-progress {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-red), var(--primary-purple));
            border-radius: 2px;
            animation: loading 3s ease-out forwards;
        }

        @keyframes title-pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        @keyframes loading {
            0% { width: 0%; }
            100% { width: 100%; }
        }

        /* Character Selection */
        .character-select {
            padding: 2rem;
            text-align: center;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .character-select.hidden {
            display: none;
        }

        .select-title {
            font-size: clamp(2rem, 6vw, 3.5rem);
            font-weight: 800;
            background: linear-gradient(45deg, var(--primary-purple), var(--primary-blue));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 3rem;
        }

        .sound-toggle {
            margin-bottom: 2rem;
            background: var(--neutral-800);
            border: none;
            padding: 0.75rem;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--primary-blue);
        }

        .sound-toggle:hover {
            background: var(--neutral-700);
        }

        .characters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            max-width: 1200px;
            margin: 0 auto 3rem;
        }

        .character-card {
            background: linear-gradient(145deg, var(--neutral-800), var(--neutral-700));
            border-radius: 20px;
            padding: 2rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid transparent;
            position: relative;
            overflow: hidden;
        }

        .character-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, var(--primary-purple), var(--primary-blue));
            opacity: 0;
            transition: opacity 0.3s ease;
            border-radius: 18px;
            z-index: -1;
        }

        .character-card:hover::before {
            opacity: 0.1;
        }

        .character-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .character-card.selected {
            border-color: var(--primary-purple);
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 40px rgba(139, 92, 246, 0.3);
        }

        .character-avatar {
            font-size: 4rem;
            margin-bottom: 1rem;
            display: block;
              width: 80px;
  height: 80px;
  border-radius: 10px;
  object-fit: cover;

        }

        .character-name {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: white;
        }

        .character-element {
            font-size: 0.875rem;
            color: var(--primary-purple);
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .character-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            font-size: 0.875rem;
            color: var(--neutral-300);
        }

        .stat-value {
            color: white;
            font-weight: 600;
        }

        .character-description {
            font-size: 0.875rem;
            color: var(--neutral-400);
            line-height: 1.4;
        }

        .start-battle-btn {
            background: linear-gradient(45deg, var(--primary-purple), var(--primary-blue));
            color: white;
            border: none;
            padding: 1rem 2rem;
            font-size: 1.25rem;
            font-weight: 700;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            opacity: 0;
            transform: translateY(20px);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0 auto;
        }

        .start-battle-btn.visible {
            opacity: 1;
            transform: translateY(0);
        }

        .start-battle-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(139, 92, 246, 0.4);
        }

        /* Battle Arena */
        .battle-arena {
            padding: 2rem;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .battle-arena.hidden {
            display: none;
        }

        .battle-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .battle-title {
            font-size: clamp(1.5rem, 4vw, 2.5rem);
            font-weight: 800;
            background: linear-gradient(45deg, var(--primary-red), var(--primary-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }

        .battle-score {
            font-size: 1.125rem;
            color: var(--neutral-300);
        }

        .score-value {
            color: var(--primary-yellow);
            font-weight: 700;
        }

        .fighters-container {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            gap: 2rem;
            align-items: center;
            flex: 1;
            margin-bottom: 2rem;
        }

        .fighter {
            background: linear-gradient(145deg, var(--neutral-800), var(--neutral-700));
            border-radius: 20px;
            padding: 2rem;
            position: relative;
            transition: all 0.3s ease;
        }

        .fighter.active {
            border: 2px solid var(--primary-yellow);
            box-shadow: 0 0 30px rgba(245, 158, 11, 0.3);
        }

        .fighter.player {
            text-align: left;
        }

        .fighter.enemy {
            text-align: right;
        }

        .fighter-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .fighter.enemy .fighter-header {
            flex-direction: row-reverse;
        }

        .fighter-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            margin-right: 1rem;
            position: relative;
            transition: all 0.3s ease;
        }

        .fighter.enemy .fighter-avatar {
            margin-right: 0;
            margin-left: 1rem;
        }

        .fighter.player .fighter-avatar {
            background: linear-gradient(45deg, var(--primary-blue), var(--primary-purple));
        }

        .fighter.enemy .fighter-avatar {
            background: linear-gradient(45deg, var(--primary-red), var(--accent-orange));
        }

        .fighter-info h3 {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .fighter-element {
            font-size: 0.875rem;
            color: var(--primary-purple);
            font-weight: 600;
        }

        .stat-bars {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .stat-bar {
            display: flex;
            flex-direction: column;
        }

        .stat-label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
        }

        .stat-name {
            color: var(--neutral-300);
            font-weight: 500;
        }

        .stat-value-text {
            color: white;
            font-weight: 600;
        }

        .stat-progress {
            width: 100%;
            height: 8px;
            background: var(--neutral-700);
            border-radius: 4px;
            overflow: hidden;
            position: relative;
        }

        .stat-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

        .stat-fill.hp {
            background: linear-gradient(90deg, var(--primary-red), #ff6b6b);
        }

        .stat-fill.energy {
            background: linear-gradient(90deg, var(--primary-blue), #60a5fa);
        }

        .stat-fill.ultimate {
            background: linear-gradient(90deg, var(--primary-yellow), var(--accent-orange));
        }

        .stat-fill.ultimate.ready {
            animation: ultimate-ready 1s ease-in-out infinite;
        }

        @keyframes ultimate-ready {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        /* Combat Log */
        .combat-log {
            background: linear-gradient(145deg, var(--neutral-800), var(--neutral-700));
            border-radius: 16px;
            padding: 1.5rem;
            width: 300px;
            max-height: 400px;
            overflow-y: auto;
        }

        .log-title {
            font-size: 1.125rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--primary-yellow);
        }

        .log-entries {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .log-entry {
            padding: 0.75rem;
            border-radius: 8px;
            font-size: 0.875rem;
            line-height: 1.4;
            animation: slide-in 0.3s ease-out;
        }

        .log-entry.player {
            background: rgba(59, 130, 246, 0.1);
            border-left: 3px solid var(--primary-blue);
            color: #93c5fd;
        }

        .log-entry.enemy {
            background: rgba(239, 68, 68, 0.1);
            border-left: 3px solid var(--primary-red);
            color: #fca5a5;
        }

        .log-entry.system {
            background: rgba(107, 114, 128, 0.1);
            border-left: 3px solid var(--neutral-500);
            color: var(--neutral-300);
        }

        .log-entry.critical {
            background: rgba(245, 158, 11, 0.2);
            border-left: 3px solid var(--primary-yellow);
            font-weight: 600;
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes slide-in {
            from { 
                opacity: 0; 
                transform: translateX(-20px); 
            }
            to { 
                opacity: 1; 
                transform: translateX(0); 
            }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
            margin-top: 2rem;
        }

        .action-btn {
            background: linear-gradient(145deg, var(--neutral-700), var(--neutral-600));
            color: white;
            border: none;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            min-width: 120px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.25rem;
        }

        .action-btn.attack {
            background: linear-gradient(45deg, var(--primary-red), #dc2626);
        }

        .action-btn.block {
            background: linear-gradient(45deg, var(--primary-blue), #2563eb);
        }

        .action-btn.special {
            background: linear-gradient(45deg, var(--primary-purple), #7c3aed);
        }

        .action-btn.ultimate {
            background: linear-gradient(45deg, var(--primary-yellow), var(--accent-orange));
        }

        .action-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .action-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .btn-icon {
            font-size: 1.25rem;
        }

        .btn-cost {
            font-size: 0.75rem;
            opacity: 0.8;
        }

        /* Game Over Screen */
        .game-over {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.5s ease;
        }

        .game-over.visible {
            opacity: 1;
            pointer-events: auto;
        }

        .game-over-content {
            background: linear-gradient(145deg, var(--neutral-800), var(--neutral-700));
            border-radius: 24px;
            padding: 3rem;
            text-align: center;
            max-width: 500px;
            width: 90%;
            transform: scale(0.8);
            transition: transform 0.3s ease;
        }

        .game-over.visible .game-over-content {
            transform: scale(1);
        }

        .game-over-title {
            font-size: 3rem;
            font-weight: 900;
            margin-bottom: 1rem;
        }

        .game-over-title.victory {
            background: linear-gradient(45deg, var(--primary-green), var(--primary-yellow));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-over-title.defeat {
            background: linear-gradient(45deg, var(--primary-red), var(--accent-orange));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-over-stats {
            background: var(--neutral-700);
            border-radius: 12px;
            padding: 1.5rem;
            margin: 2rem 0;
        }

        .stat-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .stat-row:last-child {
            margin-bottom: 0;
        }

        .game-over-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .game-over-btn {
            background: linear-gradient(45deg, var(--primary-purple), var(--primary-blue));
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .game-over-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(139, 92, 246, 0.4);
        }

        .game-over-btn.secondary {
            background: linear-gradient(45deg, var(--neutral-600), var(--neutral-500));
        }

        /* Damage Effects */
        .damage-effect {
            position: fixed;
            font-size: 2rem;
            font-weight: 900;
            pointer-events: none;
            z-index: 1500;
            animation: damage-float 1.5s ease-out forwards;
        }

        .damage-effect.critical {
            font-size: 2.5rem;
            color: var(--primary-yellow);
            text-shadow: 0 0 10px var(--primary-yellow);
        }

        .damage-effect.normal {
            color: var(--primary-red);
            text-shadow: 0 0 10px var(--primary-red);
        }

        @keyframes damage-float {
            0% { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
            100% { 
                opacity: 0; 
                transform: translateY(-80px) scale(1.2); 
            }
        }

        /* Screen Shake */
        .screen-shake {
            animation: screen-shake 0.5s ease-in-out;
        }

        @keyframes screen-shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .fighters-container {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .combat-log {
                width: 100%;
                max-height: 200px;
                order: -1;
            }

            .action-buttons {
                gap: 0.5rem;
            }

            .action-btn {
                padding: 0.75rem 1rem;
                font-size: 0.875rem;
                min-width: 100px;
            }

            .characters-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .character-card {
                padding: 1.5rem;
            }
        }

        @media (max-width: 480px) {
            .character-select,
            .battle-arena {
                padding: 1rem;
            }

            .fighter {
                padding: 1rem;
            }

            .fighter-header {
                flex-direction: column;
                text-align: center;
            }

            .fighter.enemy .fighter-header {
                flex-direction: column;
            }

            .fighter-avatar {
                margin: 0 0 1rem 0;
            }

            .fighter.enemy .fighter-avatar {
                margin: 0 0 1rem 0;
            }
        }

        /* Utility Classes */
        .hidden {
            display: none !important;
        }

        .fade-in {
            animation: fade-in 0.5s ease-out;
        }

        @keyframes fade-in {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Scrollbar Styling */
        .combat-log::-webkit-scrollbar {
            width: 6px;
        }

        .combat-log::-webkit-scrollbar-track {
            background: var(--neutral-700);
            border-radius: 3px;
        }

        .combat-log::-webkit-scrollbar-thumb {
            background: var(--neutral-500);
            border-radius: 3px;
        }

        .combat-log::-webkit-scrollbar-thumb:hover {
            background: var(--neutral-400);
        }
    </style>
</head>
<body>
    <!-- Intro Screen -->
    <div class="intro-screen" id="introScreen">
        <div class="intro-title">呪術廻戦</div>
        <div class="intro-subtitle">JUJUTSU ARENA</div>
        <div class="loading-bar">
            <div class="loading-progress"></div>
        </div>
    </div>

    <!-- Character Selection -->
    <div class="character-select" id="characterSelect">
        <h1 class="select-title">Choose Your Fighter</h1>
        <button class="sound-toggle" id="soundToggle" onclick="toggleSound()">
            <span id="soundIcon">🔊</span>
        </button>
        <div class="characters-grid" id="charactersGrid">
            <!-- Characters will be populated by JavaScript -->
        </div>
        <button class="start-battle-btn" id="startBattleBtn" onclick="startBattle()">
            <span>▶️</span>
            Enter Battle
        </button>
    </div>

    <!-- Battle Arena -->
    <div class="battle-arena hidden" id="battleArena">
        <div class="battle-header">
            <h1 class="battle-title" id="battleTitle">Battle #1</h1>
            <div class="battle-score">
                Score: <span class="score-value" id="scoreValue">0</span>
            </div>
        </div>

        <div class="fighters-container">
            <!-- Player Fighter -->
            <div class="fighter player" id="playerFighter">
                <div class="fighter-header">
                    <div class="fighter-avatar" id="playerAvatar"><img src="https://cdn.oneesports.gg/cdn-data/2024/07/Anime_JujutsuKaisen_YujiItadori_Season2.jpg" alt=""></div>
                    <div class="fighter-info">
                        <h3 id="playerName">Yuji Itadori</h3>
                        <div class="fighter-element" id="playerElement">Fire Element</div>
                    </div>
                </div>
                <div class="stat-bars">
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span class="stat-name">Health</span>
                            <span class="stat-value-text" id="playerHpText">100/100</span>
                        </div>
                        <div class="stat-progress">
                            <div class="stat-fill hp" id="playerHpBar" style="width: 100%"></div>
                        </div>
                    </div>
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span class="stat-name">Energy</span>
                            <span class="stat-value-text" id="playerEnergyText">100/100</span>
                        </div>
                        <div class="stat-progress">
                            <div class="stat-fill energy" id="playerEnergyBar" style="width: 100%"></div>
                        </div>
                    </div>
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span class="stat-name">Ultimate</span>
                            <span class="stat-value-text" id="playerUltimateText">0/100</span>
                        </div>
                        <div class="stat-progress">
                            <div class="stat-fill ultimate" id="playerUltimateBar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Combat Log -->
            <div class="combat-log">
                <div class="log-title">Battle Log</div>
                <div class="log-entries" id="logEntries">
                    <!-- Log entries will be added here -->
                </div>
            </div>

            <!-- Enemy Fighter -->
            <div class="fighter enemy" id="enemyFighter">
                <div class="fighter-header">
                    <div class="fighter-avatar" id="enemyAvatar">👹</div>
                    <div class="fighter-info">
                        <h3 id="enemyName">Mahito</h3>
                        <div class="fighter-element" id="enemyElement">Dark Element</div>
                    </div>
                </div>
                <div class="stat-bars">
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span class="stat-name">Health</span>
                            <span class="stat-value-text" id="enemyHpText">100/100</span>
                        </div>
                        <div class="stat-progress">
                            <div class="stat-fill hp" id="enemyHpBar" style="width: 100%"></div>
                        </div>
                    </div>
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span class="stat-name">Energy</span>
                            <span class="stat-value-text" id="enemyEnergyText">100/100</span>
                        </div>
                        <div class="stat-progress">
                            <div class="stat-fill energy" id="enemyEnergyBar" style="width: 100%"></div>
                        </div>
                    </div>
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span class="stat-name">Ultimate</span>
                            <span class="stat-value-text" id="enemyUltimateText">0/100</span>
                        </div>
                        <div class="stat-progress">
                            <div class="stat-fill ultimate" id="enemyUltimateBar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <button class="action-btn attack" onclick="playerAction('attack')">
                <span class="btn-icon">⚔️</span>
                <div>Attack</div>
                <div class="btn-cost">Free</div>
            </button>
            <button class="action-btn block" onclick="playerAction('block')">
                <span class="btn-icon">🛡️</span>
                <div>Block</div>
                <div class="btn-cost">Free</div>
            </button>
            <button class="action-btn special" id="specialBtn" onclick="playerAction('special')">
                <span class="btn-icon">⚡</span>
                <div id="specialName">Divergent Fist</div>
                <div class="btn-cost" id="specialCost">25 Energy</div>
            </button>
            <button class="action-btn ultimate" id="ultimateBtn" onclick="playerAction('ultimate')" disabled>
                <span class="btn-icon">🌟</span>
                <div>Ultimate</div>
                <div class="btn-cost">100 Ultimate</div>
            </button>
        </div>

        <!-- Controls Info -->
        <div style="text-align: center; color: var(--neutral-400); font-size: 0.875rem; margin-top: 2rem;">
            <p>Keyboard Controls: 1/A - Attack | 2/B - Block | 3/S - Special | 4/U - Ultimate | R - Restart</p>
        </div>
    </div>

    <!-- Game Over Screen -->
    <div class="game-over" id="gameOverScreen">
        <div class="game-over-content">
            <div class="game-over-title" id="gameOverTitle">Victory!</div>
            <div class="game-over-stats">
                <div class="stat-row">
                    <span>Battle:</span>
                    <span id="finalBattle">#1</span>
                </div>
                <div class="stat-row">
                    <span>Score:</span>
                    <span id="finalScore">0</span>
                </div>
                <div class="stat-row">
                    <span>XP Gained:</span>
                    <span id="xpGained">+100</span>
                </div>
            </div>
            <div class="game-over-buttons">
                <button class="game-over-btn" id="nextBattleBtn" onclick="nextBattle()">
                    <span>▶️</span>
                    Next Battle
                </button>
                <button class="game-over-btn secondary" onclick="restartGame()">
                    <span>🔄</span>
                    New Game
                </button>
            </div>
        </div>
    </div>

    <script>
        // Game Data
        const characters = [
            {
                id: 'yuji',
                name: 'Yuji Itadori',
                avatar: 'https://cdn.oneesports.gg/cdn-data/2024/07/Anime_JujutsuKaisen_YujiItadori_Season2.jpg',
                element: 'Fire',
                description: 'A strong-willed student with superhuman strength and Sukuna\'s vessel.',
                stats: { hp: 120, attack: 85, defense: 75, speed: 80 },
                abilities: {
                    special: { name: 'Divergent Fist', cost: 25, damage: 30 },
                    ultimate: { name: 'Black Flash', damage: 60 }
                }
            },
            {
                id: 'megumi',
                name: 'Megumi Fushiguro',
                avatar: '🐺',
                element: 'Dark',
                description: 'A stoic sorcerer who summons powerful shikigami using shadows.',
                stats: { hp: 100, attack: 70, defense: 90, speed: 85 },
                abilities: {
                    special: { name: 'Divine Dogs', cost: 20, damage: 25 },
                    ultimate: { name: 'Mahoraga', damage: 80 }
                }
            },
            {
                id: 'nobara',
                name: 'Nobara Kugisaki',
                avatar: '🔨',
                element: 'Earth',
                description: 'A confident sorcerer who wields cursed tools and straw doll technique.',
                stats: { hp: 95, attack: 90, defense: 70, speed: 75 },
                abilities: {
                    special: { name: 'Hairpin', cost: 30, damage: 35 },
                    ultimate: { name: 'Resonance', damage: 70 }
                }
            },
            {
                id: 'gojo',
                name: 'Satoru Gojo',
                avatar: '👁️',
                element: 'Light',
                description: 'The strongest jujutsu sorcerer with the Six Eyes and Limitless technique.',
                stats: { hp: 150, attack: 100, defense: 95, speed: 100 },
                abilities: {
                    special: { name: 'Blue', cost: 35, damage: 40 },
                    ultimate: { name: 'Hollow Purple', damage: 100 }
                }
            }
        ];

        const enemies = [
            {
                name: 'Mahito',
                avatar: '👹',
                element: 'Dark',
                stats: { hp: 110, attack: 80, defense: 70, speed: 85 }
            },
            {
                name: 'Sukuna',
                avatar: '😈',
                element: 'Fire',
                stats: { hp: 200, attack: 120, defense: 100, speed: 95 }
            },
            {
                name: 'Jogo',
                avatar: '🌋',
                element: 'Fire',
                stats: { hp: 130, attack: 95, defense: 60, speed: 90 }
            },
            {
                name: 'Hanami',
                avatar: '🌸',
                element: 'Earth',
                stats: { hp: 140, attack: 85, defense: 110, speed: 70 }
            },
            {
                name: 'Dagon',
                avatar: '🌊',
                element: 'Water',
                stats: { hp: 120, attack: 90, defense: 80, speed: 85 }
            }
        ];

        // Game State
        let gameState = {
            selectedCharacter: null,
            player: null,
            enemy: null,
            turn: 'player',
            battleNumber: 1,
            score: 0,
            gameOver: false,
            winner: null,
            isProcessing: false,
            gameStarted: false,
            soundEnabled: true
        };

        let combatLog = [];
        let damageEffects = [];
        let screenShake = false;
        let enemyTurnTimeout = null;

        // Audio Context for Sound Effects
        let audioContext = null;

        function initAudio() {
            if (!audioContext && gameState.soundEnabled) {
                try {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                } catch (e) {
                    console.log('Audio not supported');
                }
            }
        }

        function playSound(frequency, duration, type = 'sine', volume = 0.1) {
            if (!audioContext || !gameState.soundEnabled) return;
            
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.value = frequency;
                oscillator.type = type;
                
                gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            } catch (e) {
                // Silently handle audio errors
            }
        }

        function toggleSound() {
            gameState.soundEnabled = !gameState.soundEnabled;
            document.getElementById('soundIcon').textContent = gameState.soundEnabled ? '🔊' : '🔇';
            if (gameState.soundEnabled) {
                initAudio();
            }
        }

        // Initialize Game
        function initGame() {
            populateCharacterSelect();
            
            // Hide intro screen after loading
            setTimeout(() => {
                document.getElementById('introScreen').classList.add('hidden');
                document.getElementById('characterSelect').classList.add('fade-in');
            }, 3500);

            // Initialize audio on first user interaction
            document.addEventListener('click', initAudio, { once: true });
        }

        function populateCharacterSelect() {
            const grid = document.getElementById('charactersGrid');
            
            characters.forEach(character => {
                const card = document.createElement('div');
                card.className = 'character-card';
                card.onclick = () => selectCharacter(character);
                
                card.innerHTML = `
                    <div class="character-avatar">${character.avatar}</div>
                    <div class="character-name">${character.name}</div>
                    <div class="character-element">${character.element} Element</div>
                    <div class="character-stats">
                        <div class="stat-item">
                            <span>HP</span>
                            <span class="stat-value">${character.stats.hp}</span>
                        </div>
                        <div class="stat-item">
                            <span>ATK</span>
                            <span class="stat-value">${character.stats.attack}</span>
                        </div>
                        <div class="stat-item">
                            <span>DEF</span>
                            <span class="stat-value">${character.stats.defense}</span>
                        </div>
                        <div class="stat-item">
                            <span>SPD</span>
                            <span class="stat-value">${character.stats.speed}</span>
                        </div>
                    </div>
                    <div class="character-description">${character.description}</div>
                `;
                
                grid.appendChild(card);
            });
        }

        function selectCharacter(character) {
            // Remove previous selection
            document.querySelectorAll('.character-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            // Select new character
            event.target.closest('.character-card').classList.add('selected');
            gameState.selectedCharacter = character;
            
            // Show start button
            const startBtn = document.getElementById('startBattleBtn');
            startBtn.classList.add('visible');
            
            // Update special ability button
            document.getElementById('specialName').textContent = character.abilities.special.name;
            document.getElementById('specialCost').textContent = character.abilities.special.cost + ' Energy';
            
            playSound(300, 0.1, 'triangle');
        }

        function startBattle() {
            if (!gameState.selectedCharacter) return;
            
            // Initialize player
            gameState.player = {
                ...gameState.selectedCharacter,
                hp: gameState.selectedCharacter.stats.hp,
                maxHp: gameState.selectedCharacter.stats.hp,
                energy: 100,
                maxEnergy: 100,
                ultimate: 0,
                maxUltimate: 100,
                isBlocking: false,
                combo: 0
            };

            // Generate enemy
            const enemyTemplate = enemies[Math.floor(Math.random() * enemies.length)];
            const scaleFactor = 1 + (gameState.battleNumber - 1) * 0.15;
            
            gameState.enemy = {
                id: 'enemy',
                name: enemyTemplate.name,
                avatar: enemyTemplate.avatar,
                element: enemyTemplate.element,
                description: '',
                abilities: { special: { name: 'Dark Strike', cost: 30, damage: 35 }, ultimate: { name: 'Ultimate Attack', damage: 80 } },
                hp: Math.floor(enemyTemplate.stats.hp * scaleFactor),
                maxHp: Math.floor(enemyTemplate.stats.hp * scaleFactor),
                energy: 100,
                maxEnergy: 100,
                ultimate: 0,
                maxUltimate: 100,
                isBlocking: false,
                combo: 0,
                stats: {
                    hp: Math.floor(enemyTemplate.stats.hp * scaleFactor),
                    attack: Math.floor(enemyTemplate.stats.attack * scaleFactor),
                    defense: Math.floor(enemyTemplate.stats.defense * scaleFactor),
                    speed: Math.floor(enemyTemplate.stats.speed * scaleFactor)
                }
            };

            // Switch to battle screen
            document.getElementById('characterSelect').classList.add('hidden');
            document.getElementById('battleArena').classList.remove('hidden');
            document.getElementById('battleArena').classList.add('fade-in');
            
            gameState.gameStarted = true;
            gameState.turn = 'player';
            gameState.isProcessing = false;
            gameState.gameOver = false;
            
            combatLog = [];
            updateBattleUI();
            addLogEntry(`Battle ${gameState.battleNumber} begins! ${gameState.player.name} vs ${gameState.enemy.name}`, 'system');
            
            playSound(400, 0.3, 'sawtooth');
        }

        function updateBattleUI() {
            // Update battle header
            document.getElementById('battleTitle').textContent = `Battle #${gameState.battleNumber}`;
            document.getElementById('scoreValue').textContent = Math.floor(gameState.score);

            // Update player
            document.getElementById('playerAvatar').textContent = gameState.player.avatar;
            document.getElementById('playerName').textContent = gameState.player.name;
            document.getElementById('playerElement').textContent = gameState.player.element + ' Element';
            
            updateStatBar('player', 'Hp', gameState.player.hp, gameState.player.maxHp);
            updateStatBar('player', 'Energy', gameState.player.energy, gameState.player.maxEnergy);
            updateStatBar('player', 'Ultimate', gameState.player.ultimate, gameState.player.maxUltimate);

            // Update enemy
            document.getElementById('enemyAvatar').textContent = gameState.enemy.avatar;
            document.getElementById('enemyName').textContent = gameState.enemy.name;
            document.getElementById('enemyElement').textContent = gameState.enemy.element + ' Element';
            
            updateStatBar('enemy', 'Hp', gameState.enemy.hp, gameState.enemy.maxHp);
            updateStatBar('enemy', 'Energy', gameState.enemy.energy, gameState.enemy.maxEnergy);
            updateStatBar('enemy', 'Ultimate', gameState.enemy.ultimate, gameState.enemy.maxUltimate);

            // Update action buttons
            updateActionButtons();
            
            // Update active fighter
            updateActiveFighter();
        }

        function updateStatBar(fighter, stat, current, max) {
            const bar = document.getElementById(`${fighter}${stat}Bar`);
            const text = document.getElementById(`${fighter}${stat}Text`);
            
            const percentage = Math.max(0, (current / max) * 100);
            bar.style.width = percentage + '%';
            text.textContent = `${current}/${max}`;
            
            // Add ready animation for ultimate
            if (stat === 'Ultimate' && current >= max) {
                bar.classList.add('ready');
            } else {
                bar.classList.remove('ready');
            }
        }

        function updateActionButtons() {
            const specialBtn = document.getElementById('specialBtn');
            const ultimateBtn = document.getElementById('ultimateBtn');
            
            // Special ability button
            const specialCost = gameState.player.abilities.special.cost;
            specialBtn.disabled = gameState.player.energy < specialCost || gameState.isProcessing || gameState.turn !== 'player';
            
            // Ultimate button
            ultimateBtn.disabled = gameState.player.ultimate < gameState.player.maxUltimate || gameState.isProcessing || gameState.turn !== 'player';
            
            // Disable all buttons if not player turn
            const allButtons = document.querySelectorAll('.action-btn');
            allButtons.forEach(btn => {
                if (gameState.turn !== 'player' || gameState.isProcessing) {
                    btn.disabled = true;
                } else if (!btn.id || (btn.id !== 'specialBtn' && btn.id !== 'ultimateBtn')) {
                    btn.disabled = false;
                }
            });
        }

        function updateActiveFighter() {
            const playerFighter = document.getElementById('playerFighter');
            const enemyFighter = document.getElementById('enemyFighter');
            
            if (gameState.turn === 'player') {
                playerFighter.classList.add('active');
                enemyFighter.classList.remove('active');
            } else {
                playerFighter.classList.remove('active');
                enemyFighter.classList.add('active');
            }
        }

        function addLogEntry(message, type, critical = false) {
            const logContainer = document.getElementById('logEntries');
            const entry = document.createElement('div');
            
            entry.className = `log-entry ${type}${critical ? ' critical' : ''}`;
            entry.textContent = message;
            
            logContainer.appendChild(entry);
            logContainer.scrollTop = logContainer.scrollHeight;
            
            // Keep only last 10 entries
            if (logContainer.children.length > 10) {
                logContainer.removeChild(logContainer.firstChild);
            }
            
            combatLog.push({ message, type, critical });
            if (combatLog.length > 10) {
                combatLog.shift();
            }
        }

        function calculateDamage(attacker, defender, attackType) {
            let baseDamage = attacker.stats.attack;
            let critical = false;
            
            switch (attackType) {
                case 'basic':
                    baseDamage = Math.floor(baseDamage * 0.8);
                    if (Math.random() < 0.12) {
                        critical = true;
                        baseDamage = Math.floor(baseDamage * 1.6);
                    }
                    break;
                case 'special':
                    baseDamage = Math.floor(baseDamage * 1.3);
                    break;
                case 'ultimate':
                    baseDamage = Math.floor(baseDamage * 2.2);
                    critical = true;
                    break;
            }
            
            // Random variance
            const variance = 0.2;
            const randomMultiplier = 1 + (Math.random() - 0.5) * variance * 2;
            baseDamage = Math.floor(baseDamage * randomMultiplier);
            
            // Combo multiplier
            if (attacker.combo > 0) {
                const comboMultiplier = 1 + (attacker.combo * 0.1);
                baseDamage = Math.floor(baseDamage * comboMultiplier);
            }
            
            // Defense calculation
            const defense = defender.stats.defense;
            const damageReduction = defense / (defense + 100);
            const finalDamage = Math.max(1, Math.floor(baseDamage * (1 - damageReduction)));
            
            return { damage: finalDamage, critical };
        }

        function showDamageEffect(target, damage, critical) {
            const targetElement = document.getElementById(`${target}Fighter`);
            const rect = targetElement.getBoundingClientRect();
            
            const damageElement = document.createElement('div');
            damageElement.className = `damage-effect ${critical ? 'critical' : 'normal'}`;
            damageElement.textContent = `-${damage}`;
            
            damageElement.style.left = (rect.left + rect.width / 2) + 'px';
            damageElement.style.top = (rect.top + rect.height / 2) + 'px';
            
            document.body.appendChild(damageElement);
            
            setTimeout(() => {
                damageElement.remove();
            }, 1500);
        }

        function triggerScreenShake() {
            document.body.classList.add('screen-shake');
            setTimeout(() => {
                document.body.classList.remove('screen-shake');
            }, 500);
        }

        function playerAction(action) {
            if (gameState.isProcessing || gameState.turn !== 'player' || gameState.gameOver || !gameState.player || !gameState.enemy) {
                console.log('Player action blocked:', { 
                    isProcessing: gameState.isProcessing, 
                    turn: gameState.turn, 
                    gameOver: gameState.gameOver,
                    hasPlayer: !!gameState.player,
                    hasEnemy: !!gameState.enemy
                });
                return;
            }
            
            console.log('Player action:', action);
            
            gameState.isProcessing = true;
            updateActionButtons();
            
            let damage = 0;
            let critical = false;
            let logMessage = '';
            
            // Reset blocking states
            gameState.player.isBlocking = false;
            gameState.enemy.isBlocking = false;
            
            switch (action) {
                case 'attack':
                    const attackResult = calculateDamage(gameState.player, gameState.enemy, 'basic');
                    damage = attackResult.damage;
                    critical = attackResult.critical;
                    
                    gameState.enemy.hp = Math.max(0, gameState.enemy.hp - damage);
                    gameState.player.energy = Math.min(gameState.player.maxEnergy, gameState.player.energy + 15);
                    gameState.player.ultimate = Math.min(gameState.player.maxUltimate, gameState.player.ultimate + 10);
                    
                    if (critical) {
                        gameState.player.combo += 1;
                        logMessage = `Critical hit! ${gameState.player.name} deals ${damage} damage!`;
                    } else {
                        logMessage = `${gameState.player.name} attacks for ${damage} damage!`;
                    }
                    
                    showDamageEffect('enemy', damage, critical);
                    playSound(300, 0.2, critical ? 'sawtooth' : 'square');
                    break;
                    
                case 'block':
                    gameState.player.isBlocking = true;
                    gameState.player.energy = Math.min(gameState.player.maxEnergy, gameState.player.energy + 10);
                    gameState.player.ultimate = Math.min(gameState.player.maxUltimate, gameState.player.ultimate + 5);
                    
                    logMessage = `${gameState.player.name} prepares to defend!`;
                    playSound(200, 0.2, 'sine');
                    break;
                    
                case 'special':
                    const specialCost = gameState.player.abilities.special.cost;
                    if (gameState.player.energy >= specialCost) {
                        gameState.player.energy -= specialCost;
                        
                        const specialResult = calculateDamage(gameState.player, gameState.enemy, 'special');
                        damage = specialResult.damage;
                        
                        gameState.enemy.hp = Math.max(0, gameState.enemy.hp - damage);
                        gameState.player.ultimate = Math.min(gameState.player.maxUltimate, gameState.player.ultimate + 15);
                        
                        logMessage = `${gameState.player.abilities.special.name}! ${damage} damage!`;
                        showDamageEffect('enemy', damage, false);
                        playSound(400, 0.3, 'triangle');
                    }
                    break;
                    
                case 'ultimate':
                    if (gameState.player.ultimate >= gameState.player.maxUltimate) {
                        gameState.player.ultimate = 0;
                        
                        const ultimateResult = calculateDamage(gameState.player, gameState.enemy, 'ultimate');
                        damage = ultimateResult.damage;
                        critical = true;
                        
                        gameState.enemy.hp = Math.max(0, gameState.enemy.hp - damage);
                        gameState.player.combo += 2;
                        
                        logMessage = `${gameState.player.abilities.ultimate.name}! Devastating ${damage} damage!`;
                        showDamageEffect('enemy', damage, true);
                        triggerScreenShake();
                        playSound(200, 0.5, 'sawtooth', 0.15);
                    }
                    break;
            }
            
            // Add log entry
            if (logMessage) {
                addLogEntry(logMessage, 'player', critical);
            }
            
            updateBattleUI();
            
            // Check for victory
            if (gameState.enemy.hp <= 0) {
                setTimeout(() => {
                    endGame(true);
                }, 1000);
                return;
            }
            
            console.log('Player action complete, switching to enemy turn');
            
            // Switch to enemy turn
            gameState.turn = 'enemy';
            updateBattleUI();
            
            // Clear any existing enemy turn timeout
            if (enemyTurnTimeout) {
                clearTimeout(enemyTurnTimeout);
            }
            
            // Schedule enemy turn
            enemyTurnTimeout = setTimeout(() => {
                console.log('Enemy turn timeout triggered');
                enemyTurn();
            }, 1500);
        }

        function enemyTurn() {
            console.log('Enemy turn starting...');
            
            if (gameState.gameOver || gameState.turn !== 'enemy' || !gameState.player || !gameState.enemy) {
                console.log('Enemy turn cancelled - game state check failed');
                return;
            }
            
            // Simple AI logic
            let action = 'attack';
            const rand = Math.random();
            
            if (gameState.enemy.ultimate >= gameState.enemy.maxUltimate && rand < 0.6) {
                action = 'ultimate';
            } else if (gameState.player.hp < 30 && rand < 0.3) {
                action = 'block';
            } else if (rand < 0.15) {
                action = 'block';
            }
            
            let damage = 0;
            let logMessage = '';
            
            // Reset blocking states
            gameState.player.isBlocking = false;
            gameState.enemy.isBlocking = false;
            
            switch (action) {
                case 'attack':
                    const attackResult = calculateDamage(gameState.enemy, gameState.player, 'basic');
                    damage = attackResult.damage;
                    
                    if (gameState.player.isBlocking) damage = Math.floor(damage * 0.5);
                    
                    gameState.player.hp = Math.max(0, gameState.player.hp - damage);
                    gameState.enemy.energy = Math.min(gameState.enemy.maxEnergy, gameState.enemy.energy + 12);
                    gameState.enemy.ultimate = Math.min(gameState.enemy.maxUltimate, gameState.enemy.ultimate + 8);
                    
                    logMessage = `${gameState.enemy.name} attacks for ${damage} damage!`;
                    showDamageEffect('player', damage, false);
                    playSound(250, 0.2, 'square');
                    break;
                    
                case 'block':
                    gameState.enemy.isBlocking = true;
                    gameState.enemy.energy = Math.min(gameState.enemy.maxEnergy, gameState.enemy.energy + 10);
                    gameState.enemy.ultimate = Math.min(gameState.enemy.maxUltimate, gameState.enemy.ultimate + 5);
                    
                    logMessage = `${gameState.enemy.name} prepares to counter!`;
                    playSound(180, 0.2, 'sine');
                    break;
                    
                case 'ultimate':
                    if (gameState.enemy.ultimate >= gameState.enemy.maxUltimate) {
                        gameState.enemy.ultimate = 0;
                        
                        const ultimateResult = calculateDamage(gameState.enemy, gameState.player, 'ultimate');
                        damage = ultimateResult.damage;
                        
                        if (gameState.player.isBlocking) damage = Math.floor(damage * 0.7);
                        
                        gameState.player.hp = Math.max(0, gameState.player.hp - damage);
                        
                        logMessage = `${gameState.enemy.name} unleashes their ultimate for ${damage} damage!`;
                        showDamageEffect('player', damage, true);
                        triggerScreenShake();
                        playSound(180, 0.5, 'sawtooth', 0.15);
                    }
                    break;
            }
            
            // Add log entry
            if (logMessage) {
                setTimeout(() => addLogEntry(logMessage, 'enemy'), 100);
            }
            
            updateBattleUI();
            
            // Check for defeat
            if (gameState.player.hp <= 0) {
                setTimeout(() => {
                    endGame(false);
                }, 1000);
                return;
            }
            
            // Switch back to player turn
            console.log('Enemy turn complete, switching to player turn');
            gameState.turn = 'player';
            gameState.isProcessing = false;
            updateBattleUI();
        }

        function endGame(playerWon) {
            gameState.gameOver = true;
            gameState.winner = playerWon ? 'player' : 'enemy';
            
            // Calculate final score
            if (playerWon) {
                const survivalBonus = Math.floor((gameState.player.hp / gameState.player.maxHp) * 200);
                const comboBonus = gameState.player.combo * 50;
                const battleBonus = gameState.battleNumber * 100;
                gameState.score += survivalBonus + comboBonus + battleBonus;
            }
            
            // Show game over screen
            const gameOverScreen = document.getElementById('gameOverScreen');
            const gameOverTitle = document.getElementById('gameOverTitle');
            const nextBattleBtn = document.getElementById('nextBattleBtn');
            
            if (playerWon) {
                gameOverTitle.textContent = '🎉 VICTORY! 🎉';
                gameOverTitle.className = 'game-over-title victory';
                nextBattleBtn.style.display = 'flex';
                
                // Victory sound
                setTimeout(() => playSound(523, 0.2, 'sine', 0.15), 0);
                setTimeout(() => playSound(659, 0.2, 'sine', 0.15), 200);
                setTimeout(() => playSound(784, 0.2, 'sine', 0.15), 400);
                setTimeout(() => playSound(1047, 0.4, 'sine', 0.2), 600);
            } else {
                gameOverTitle.textContent = '💀 DEFEATED 💀';
                gameOverTitle.className = 'game-over-title defeat';
                nextBattleBtn.style.display = 'none';
                
                // Defeat sound
                setTimeout(() => playSound(220, 0.3, 'sawtooth', 0.15), 0);
                setTimeout(() => playSound(196, 0.3, 'sawtooth', 0.15), 300);
                setTimeout(() => playSound(175, 0.5, 'sawtooth', 0.15), 600);
            }
            
            // Update stats
            document.getElementById('finalBattle').textContent = `#${gameState.battleNumber}`;
            document.getElementById('finalScore').textContent = Math.floor(gameState.score);
            document.getElementById('xpGained').textContent = `+${playerWon ? 100 + gameState.battleNumber * 25 : 25}`;
            
            setTimeout(() => {
                gameOverScreen.classList.add('visible');
            }, 1000);
        }

        function nextBattle() {
            gameState.battleNumber++;
            gameState.gameOver = false;
            gameState.winner = null;
            gameState.turn = 'player';
            gameState.isProcessing = false;
            
            // Heal player partially
            const healAmount = Math.floor(gameState.player.maxHp * 0.3);
            gameState.player.hp = Math.min(gameState.player.maxHp, gameState.player.hp + healAmount);
            gameState.player.energy = gameState.player.maxEnergy;
            gameState.player.ultimate = 0;
            gameState.player.isBlocking = false;
            gameState.player.combo = 0;
            
            // Generate new enemy
            const enemyTemplate = enemies[Math.floor(Math.random() * enemies.length)];
            const scaleFactor = 1 + (gameState.battleNumber - 1) * 0.15;
            
            gameState.enemy = {
                id: 'enemy',
                name: enemyTemplate.name,
                avatar: enemyTemplate.avatar,
                element: enemyTemplate.element,
                description: '',
                abilities: { special: { name: 'Dark Strike', cost: 30, damage: 35 }, ultimate: { name: 'Ultimate Attack', damage: 80 } },
                hp: Math.floor(enemyTemplate.stats.hp * scaleFactor),
                maxHp: Math.floor(enemyTemplate.stats.hp * scaleFactor),
                energy: 100,
                maxEnergy: 100,
                ultimate: 0,
                maxUltimate: 100,
                isBlocking: false,
                combo: 0,
                stats: {
                    hp: Math.floor(enemyTemplate.stats.hp * scaleFactor),
                    attack: Math.floor(enemyTemplate.stats.attack * scaleFactor),
                    defense: Math.floor(enemyTemplate.stats.defense * scaleFactor),
                    speed: Math.floor(enemyTemplate.stats.speed * scaleFactor)
                }
            };
            
            // Hide game over screen
            document.getElementById('gameOverScreen').classList.remove('visible');
            
            // Clear log and add new entry
            document.getElementById('logEntries').innerHTML = '';
            combatLog = [];
            addLogEntry(`Battle ${gameState.battleNumber} begins! ${gameState.player.name} vs ${gameState.enemy.name}`, 'system');
            
            updateBattleUI();
            playSound(400, 0.3, 'sawtooth');
        }

        function restartGame() {
            // Reset game state
            gameState = {
                selectedCharacter: null,
                player: null,
                enemy: null,
                turn: 'player',
                battleNumber: 1,
                score: 0,
                gameOver: false,
                winner: null,
                isProcessing: false,
                gameStarted: false,
                soundEnabled: gameState.soundEnabled
            };
            
            combatLog = [];
            
            // Clear any existing timeouts
            if (enemyTurnTimeout) {
                clearTimeout(enemyTurnTimeout);
                enemyTurnTimeout = null;
            }
            
            // Hide game over screen
            document.getElementById('gameOverScreen').classList.remove('visible');
            
            // Show character select
            document.getElementById('battleArena').classList.add('hidden');
            document.getElementById('characterSelect').classList.remove('hidden');
            
            // Reset character selection
            document.querySelectorAll('.character-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            document.getElementById('startBattleBtn').classList.remove('visible');
            
            playSound(300, 0.2, 'triangle');
        }

        // Keyboard Controls
        document.addEventListener('keydown', function(e) {
            if (gameState.gameOver || gameState.turn !== 'player' || gameState.isProcessing) return;
            
            switch(e.key.toLowerCase()) {
                case '1':
                case 'a':
                    playerAction('attack');
                    break;
                case '2':
                case 'b':
                    playerAction('block');
                    break;
                case '3':
                case 's':
                    if (gameState.player && gameState.player.energy >= gameState.player.abilities.special.cost) {
                        playerAction('special');
                    }
                    break;
                case '4':
                case 'u':
                    if (gameState.player && gameState.player.ultimate >= gameState.player.maxUltimate) {
                        playerAction('ultimate');
                    }
                    break;
                case 'r':
                    if (gameState.gameOver) {
                        restartGame();
                    }
                    break;
            }
        });

        // Initialize game when page loads
        window.addEventListener('load', initGame);
    </script>
</body>
</html>